#{{ ansible_managed }}
########################################################
# This is the main config file for dehydrated          #
#                                                      #
# This file is looked for in the following locations:  #
# $SCRIPTDIR/config (next to this script)              #
# /usr/local/etc/dehydrated/config                     #
# /etc/dehydrated/config                               #
# ${PWD}/config (in current working-directory)         #
#                                                      #
# Default values of this config are in comments        #
########################################################

# Which user should dehydrated run as? This will be implictly enforced when running as root
{% if dehydrated_config_user is defined %}
DEHYDRATED_USER="{{ dehydrated_config_user }}"
{% else %}
#DEHYDRATED_USER=
{% endif %}

# Which group should dehydrated run as? This will be implictly enforced when running as root
{% if dehydrated_config_group is defined %}
DEHYDRATED_GROUP="{{ dehydrated_config_group }}"
{% else %}
#DEHYDRATED_GROUP=
{% endif %}

# Resolve names to addresses of IP version only. (curl)
# supported values: 4, 6
# default: <unset>
IP_VERSION="{{ dehydrated_config_ip_version }}"

# Path to certificate authority (default: https://acme-v02.api.letsencrypt.org/directory)
CA="{{ dehydrated_config_ca }}"

# Path to old certificate authority
# Set this value to your old CA value when upgrading from ACMEv1 to ACMEv2 under a different endpoint.
# If dehydrated detects an account-key for the old CA it will automatically reuse that key
# instead of registering a new one.
# default: https://acme-v01.api.letsencrypt.org/directory
OLDCA="{{ dehydrated_config_oldca }}"

# Which challenge should be used? Currently http-01, dns-01 and tls-alpn-01 are supported
CHALLENGETYPE="{{ dehydrated_config_challengetype }}"

# Path to a directory containing additional config files, allowing to override
# the defaults found in the main configuration file. Additional config files
# in this directory needs to be named with a '.sh' ending.
# default: <unset>
{% if dehydrated_config_d is defined %}
CONFIG_D="{{ dehydrated_config_d }}"
{% else %}
#CONFIG_D=
{% endif %}

# Directory for per-domain configuration files.
# If not set, per-domain configurations are sourced from each certificates output directory.
# default: <unset>
{% if dehydrated_config_domains_d is defined %}
DOMAINS_D="{{ dehydrated_config_domains_d }}"
{% else %}
#DOMAINS_D=
{% endif %}

# Base directory for account key, generated certificates and list of domains (default: $SCRIPTDIR -- uses config directory if undefined)
BASEDIR="{{ dehydrated_config_basedir }}"

# File containing the list of domains to request certificates for (default: $BASEDIR/domains.txt)
DOMAINS_TXT="{{ dehydrated_domains_txt }}"

# Output directory for generated certificates
CERTDIR="{{ dehydrated_config_certdir }}"

# Output directory for alpn verification certificates
ALPNCERTDIR="{{ dehydrated_config_alpncertdir }}"

# Directory for account keys and registration information
ACCOUNTDIR="{{ dehydrated_config_accountdir }}"

# Output directory for challenge-tokens to be served by webserver or deployed in HOOK (default: /var/www/dehydrated)
WELLKNOWN="{{ dehydrated_config_wellknown }}"

# Default keysize for private keys (default: 4096)
KEYSIZE="{{ dehydrated_config_keysize }}"

# Path to openssl config file (default: <unset> - tries to figure out system default)
{% if dehydrated_config_openssl_cnf is defined %}
OPENSSL_CNF="{{ dehydrated_config_openssl_cnf }}"
{% else %}
#OPENSSL_CNF=
{% endif %}

# Path to OpenSSL binary (default: "openssl")
OPENSSL="{{ dehydrated_config_openssl }}"

# Extra options passed to the curl binary (default: <unset>)
{% if dehydrated_config_curl_opts is defined %}
CURL_OPTS="{{ dehydrated_config_curl_opts }}"
{% else %}
#CURL_OPTS=
{% endif %}

# Program or function called in certain situations
#
# After generating the challenge-response, or after failed challenge (in this case altname is empty)
# Given arguments: clean_challenge|deploy_challenge altname token-filename token-content
#
# After successfully signing certificate
# Given arguments: deploy_cert domain path/to/privkey.pem path/to/cert.pem path/to/fullchain.pem
#
# BASEDIR and WELLKNOWN variables are exported and can be used in an external program
# default: <unset>
{% if dehydrated_hook is defined %}
HOOK="{{ dehydrated_hook }}"
{% else %}
#HOOK=
{% endif %}

# Chain clean_challenge|deploy_challenge arguments together into one hook call per certificate (default: no)
HOOK_CHAIN="{{ dehydrated_config_hook_chain }}"

# Minimum days before expiration to automatically renew certificate (default: 30)
RENEW_DAYS="{{ dehydrated_config_renew_days }}"

# Regenerate private keys instead of just signing new certificates on renewal (default: yes)
PRIVATE_KEY_RENEW="{{ dehydrated_config_private_key_renew }}"

# Create an extra private key for rollover (default: no)
PRIVATE_KEY_ROLLOVER="{{ dehydrated_config_private_key_rollover }}"

# Which public key algorithm should be used? Supported: rsa, prime256v1 and secp384r1
KEY_ALGO="{{ dehydrated_config_key_algo }}"

# E-mail to use during the registration (default: <unset>)
CONTACT_EMAIL="{{ dehydrated_config_config_email }}"

# Lockfile location, to prevent concurrent access (default: $BASEDIR/lock)
LOCKFILE="{{ dehydrated_config_lockfile }}"

# Option to add CSR-flag indicating OCSP stapling to be mandatory (default: no)
OCSP_MUST_STAPLE="{{ dehydrated_config_ocsp_must_stapple }}"

# Fetch OCSP responses (default: no)
OCSP_FETCH="{{ dehydrated_config_ocsp_fetch }}"

# OCSP refresh interval (default: 5 days)
OCSP_DAYS={{ dehydrated_config_ocsp_days }}

# Issuer chain cache directory (default: $BASEDIR/chains)
CHAINCACHE="{{ dehydrated_config_chaincache }}"

# Automatic cleanup (default: no)
AUTO_CLEANUP="{{ dehydrated_config_auto_cleanup }}"

# ACME API version (default: auto)
API="{{ dehydrated_config_api }}"
